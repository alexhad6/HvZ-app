Team: HvZ App

Members: Santiago Rodriguez, Alex Hadley, Matthew Waddell, Kyra Clark

Project 3B — Component Specifications: Authentication and Registration
    Report: https://github.com/alexhad6/HvZ-app/blob/master/Administrative/Phase%203/specs_3b_AH.txt
    Primary author: Alex


ARCHITECTURE ADDENDUM

Original architecture: https://github.com/alexhad6/HvZ-app/blob/master/Administrative/Phase%202/architecture_2a.pdf

Instead of being a separate component, registration will be closely integrated
with authentication. Flutter, the application SDK we are using, allows websites
as well as Android and iOS applications to be created from the same codebase, so
there is no need to program a separate registration website. Also, the
authentication API provided by Firebase is used both to sign in and create
users, so it makes sense to handle both operations in the same component.
Authentication and registration will also handle feed code generation, which was
previously handled by the registration component. Below is a list of the
sections from our architecture that change as a result, and some additional
details about authentication.


    COMPONENT DESCRIPTIONS

        AUTHENTICATION (p. 3)

        In this section, it says that the authentication component is
        responsible for managing read and write permissions for the database and
        file storage. In Firebase, read and write permissions are handled
        through Firebase Security Rules (https://firebase.google.com/docs/rules),
        which are written in a special language. This is a separate component
        which integrates directly with the database and file storage components
        via Firebase’s servers. Thus, it is not part of the main authentication
        component. Authentication is responsible for identifying users who sign
        into our app, whereas Firebase Security Rules is responsible for
        actually managing permissions. We will have to implement Security Rules
        at some point, but they are out of the scope of the authentication
        component.


        GOOGLE SIGN-IN (p. 4)

        Everything related to Google Sign-In is still accurate. Note that the
        Google Sign-In component is fully implemented as a package in Flutter
        (https://pub.dev/packages/google_sign_in).


        REGISTRATION WEBSITE (p. 4)

        As explained earlier, registration and authentication will now be
        handled in the same component. The website aspect will be handled
        through the application since Flutter allows websites and mobile apps
        to be built from the same codebase.


    COMPONENT CONNECTIONS


        APPLICATION ↔︎ AUTHENTICATION (pp. 5–6)

        In addition to what is described in this section, the authentication
        component will also be able to respond to various queries from the
        application, such as whether the user is signed in, the name/email/user
        ID of the current user, and whether their email has been verified (to
        prove that they own the email). Authentication will also tell the app if
        any sign-in errors occur, such as an invalid email/password combination.
        The application will also communicate with the authentication component
        when the app opens to tell it to initialize. (Initialization is needed
        because the way to track whether a user is signed in using Firebase’s
        authentication API is to set up a listener that gets notified whenever a
        user signs in or out.)


        REGISTRATION WEBSITE ↔︎ AUTHENTICATION (p. 7)

        The communication described in this section is now handled in the
        authentication component.


        REGISTRATION WEBSITE ↔︎ DATABASE (p. 7)

        This section describes how additional user information (such as class
        year, school, and dorm) are sent to the database. This will now be sent
        from the application component, since the registration website will be
        implemented using Flutter from the same codebase as the app.



    EXAMPLE STORIES: WALKING THROUGH COMPONENTS


        REGISTERING THROUGH THE WEBSITE (p. 8)

        This story is mostly the same, but there is no longer a separate
        registration website component. Instead, authentication and feed code
        generation are handled by the authentication component, and UI
        operations are handled by the app component. There will also be an
        additional verification step during registration where the
        authentication component checks that the user’s email is from one of the
        seven Claremont colleges, and returns an error to the app component if
        the email is invalid.


        USER LOGS IN TO THE APP (p. 8)

        This story is mostly the same, except that there will also be an
        additional check that the user has verified their email by clicking a
        link in the confirmation email. (The email verification process is all
        handled by Firebase.) Also, if there is a sign-in error, such as an
        invalid email/password combination, the authentication component will
        communicate this to the application.


    FEASIBILITY

        AUTHENTICATION (p. 12)

        In the “Authentication” under “Feasibility” (p. 12), FirebaseUI is
        discussed. However, FirebaseUI is not supported for Flutter. Instead the
        authentication component will have functions to handle everything
        relating to authentication and registration, and the application
        component will call these functions.


COMPONENT DESCRIPTION AND ROLE IN OVERALL SYSTEM

Authentication is responsible for securely identifying our users based on their
credentials and keeping track of who is currently logged in. Authentication
generates a unique ID for each user, which can be used by the database to
retrieve additional user information. Knowing who is using the app allows us to
tailor the app experience to a particular user (e.g. by displaying their name
and statistics) or to a particular subset of users (human players, zombie
players, or moderators). Authentication also generates a secure JSON web token
that is sent along with requests to the database and file storage in order to
verify the user’s identity to manage read and write permissions. (The
enforcement of read and write permissions is done separately by Firebase
Security Rules.)


REQUIREMENTS

Full requirements: https://github.com/alexhad6/HvZ-app/blob/master/Administrative/Phase%201/analysis_1c.txt

The authentication and registration component is responsible for complying with
the following requirements for our 1.0 release:

    1. Code is clear, readable, and documented so that mods can maintain and
       change the app in the future.

    3. Players can register for the game and create an account.

    4. Players can log into their accounts.

In addition, the external interfaces of the authentication and registration
component must be set up in order to work well with the application component,
which it mainly communicates with.


EXTERNAL INTERFACES

Initialize authentication
  • Function: Creates a listener that is notified whenever a user logs in our
              logs out, updating stored information on the current user
              accordingly. (The stream that it listens to is provided by the
              Firebase Authentication package for Flutter; see
              https://firebase.flutter.dev/docs/auth/usage.)
  • Caller:   application
  • Inputs:   none
  • Outputs:  none


Sign in user with email and password
  • Function: Verifies the identity of a user based on their email and password.
              Returns whether the sign-in was successful, and if not, returns an
              appropriate error message as a string.
  • Caller:   application
  • Inputs:   email (String), password (String)
  • Outputs:  [success (bool), error_message (String)] (List)
     • Possible values of error_message:
        • "" (if successful)
        • "Invalid email address"
        • "Email address doesn't match an existing account"
        • "Incorrect password"
        • "Your account is disabled"


Register user with email and password
  • Function: Creates a new account for the user based on an email and password
              and signs the user in. The user must use a Claremont Colleges
              email address. Generates user ID and feed code and adds them to
              the database. Sends confirmation email with feed code and link to
              verify email ownership. Returns whether the sign-in was
              successful, and, if not, returns an appropriate error message as a
              string.
  • Caller:   application
  • Inputs:   email (String), password (String)
  • Outputs:  [success (bool), errorMessage (String)] (List)
     • Possible values
        • "" (if successful)
        • "Use a Claremont Colleges email address"
        • "Invalid email address"
        • "Account for this email address already exists"
        • "Password must have at least 6 characters"


Sign-In or register user with Google Sign-In
  • Function: Prompts the user to sign in using Google Sign-In. If their account
              does not exist yet, an account is created. If a new account is
              created, generates user ID and feed code and adds them to the
              database, and sends confirmation email with feed code. Returns
              false if the user aborts the sign-in process and true otherwise.
  • Caller:   application
  • Inputs:   none
  • Outputs:  success (bool)


Check if email has been verified
  • Function: Checks if the user has verified their email through a link in the
              confirmation email. This comes into play when a user creates an
              account with an email and password.
  • Caller:   application
  • Inputs:   none
  • Outputs:  verified (bool)


Check if a user is signed in
     • Function: Returns a boolean representing whether or not a user is logged
                 in to the app.
     • Caller:   application
     • Inputs:   none
     • Outputs:  signedIn (bool)


Get user’s ID
     • Function: Returns the current user’s unique user ID.
     • Caller:   application
     • Inputs:   none
     • Outputs:  uid (String)


Get user’s name
     • Function: Returns the current user’s name.
     • Caller:   application
     • Inputs:   none
     • Outputs:  name (String)


Update user’s name
     • Function: Updates a user’s name.
     • Caller:   application
     • Inputs:   name (String)
     • Outputs:  none


Send reset password email
     • Function: Sends a reset password email to the specified email. (Tells the
                 Firebase backend to send the email.) Returns whether the
                 operation was successful, and, if not, returns an appropriate
                 error message as a string.
     • Caller:   application
     • Inputs:   none
     • Outputs:  [success (bool), errorMessage (String)] (List)
        • Possible values
           • "" (if successful)
           • "Invalid email address"
           • "Email address doesn't match an existing account"


SIZE, COMPLEXITY, AND TESTABILITY

Since we are not using Firebase’s premade authentication UI, the above routines
will require a reasonable amount of code. There is a range of complexity,
although none of the functions are too complex for the scope of this project.
For example, checking if the user is logged in is pretty straightforward: there
will be a boolean variable keeping track of whether they are signed in, which
can simply be returned. However, registering a user is a multi-step process
involving generating a feed code and communicating with both the application and
the database. There are 10 routines listed under external interfaces, although
most of the code will be related to the registration and sign-in routines since
they are the most complex. Their functionality will likely be split into several
private functions in order to reduce complexity. I expect that the
authentication and registration component might have closer to 400 lines of code
than 100 lines, although some of that code will be copied from the documentation
for FlutterFire (https://firebase.flutter.dev/docs/auth/usage), the package that
links our application with Firebase.

In terms of testing, Firebase has the ability to run tests using a local
emulator, which is nice since it does not require a connection to the servers
(https://firebase.google.com/docs/rules/unit-tests). It can be used to test
Firebase Security Rules (which enforce read and write permissions) by pretending
to be signed in as a particular class of user. Unfortunately, the emulator does
not have support for testing authentication functions in this way. However, we
can still test the external interfaces of authentication if we run a program
that does establish a connection to the servers and uses test accounts.

These functions are automatically testable since they only rely on inputs that
can be passed in programmatically, and their outputs or effects can also be
tested by a program. They do not rely on code from any other components within
our project. These functions do rely on the external interfaces of the Firebase
Authentication and Google Sign-In packages for Flutter.

Google Sign-In would be difficult to write automatic tests for; however, we
could either sign in once with a Google account and then test programmatically
using that OAuth token, or we could replace the Google Sign-In functionality
with email authentication for those tests. Since Google Sign-In is a widely used
external component, it is less important to write tests that Google Sign-In
itself works than it is to write tests that the registration process works in
general, which is possible to do.
